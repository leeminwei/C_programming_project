================================
  Stack 應用題目：括號匹配檢查器
================================

【題目背景】
括號匹配檢查是編程語言編譯器和文本編輯器中的重要功能。
本題目要求學生實現一個基於Stack資料結構的括號匹配檢查系統。

【學習目標】
1. 掌握Stack資料結構的基本操作
2. 理解Stack在實際問題中的應用
3. 培養算法邏輯思維能力
4. 學習錯誤診斷和處理

【功能需求】
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. 支援的括號類型：
   • 小括號：( )
   • 中括號：[ ]
   • 大括號：{ }

2. 檢查規則：
   • 每個左括號必須有對應的右括號
   • 括號必須按正確順序關閉（LIFO原則）
   • 不同類型的括號不能交叉匹配
   • 忽略非括號字符

3. 輸入格式：
   • 包含括號和其他字符的字符串
   • 字符串長度不超過1000個字符

4. 輸出格式：
   • 正確匹配：顯示 "VALID"
   • 不正確匹配：顯示 "INVALID" 並說明錯誤原因

【測試案例】
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

✓ 有效案例：
   "()" → VALID
   "()[]{}" → VALID
   "({[]})" → VALID
   "(a+b)*[c-d]" → VALID
   "{x*(y+z)}" → VALID

✗ 無效案例：
   "(]" → INVALID (類型不匹配)
   "([)]" → INVALID (交叉匹配)
   "(((" → INVALID (缺少右括號)
   ")))" → INVALID (缺少左括號)
   "{[}]" → INVALID (順序錯誤)

【實作要求】
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. Stack結構實現：
   • 使用陣列實現Stack
   • 包含初始化、推入、彈出、檢查空/滿等基本操作
   • 適當的錯誤處理

2. 括號匹配算法：
   • 遇到左括號時推入Stack
   • 遇到右括號時與Stack頂部元素匹配
   • 最終檢查Stack是否為空

3. 錯誤診斷：
   • 提供詳細的錯誤位置和類型信息
   • 顯示檢查過程的詳細步驟

4. 程式品質：
   • 良好的程式碼結構和註釋
   • 適當的函數分割
   • 完整的測試案例

【編譯和執行】
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. 編譯程序：
   make

2. 執行程序：
   make run

3. 執行測試：
   make test

4. 清理檔案：
   make clean

【評分標準】
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

• Stack實現正確性 (30分)
  - 基本操作函數實現
  - 邊界條件處理
  - 記憶體管理

• 括號匹配算法 (40分)
  - 算法邏輯正確性
  - 各種測試案例通過
  - 演算法效率

• 錯誤處理和診斷 (20分)
  - 詳細的錯誤信息
  - 錯誤位置定位
  - 用戶友好的輸出

• 程式碼品質 (10分)
  - 程式碼結構清晰
  - 適當的註釋
  - 命名規範

【提示】
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. 思考Stack的LIFO特性如何幫助解決括號匹配問題
2. 考慮所有可能的錯誤情況
3. 注意邊界條件的處理
4. 可以增加互動式輸入功能提升用戶體驗

【擴展思考】
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

完成基本功能後，可以考慮以下擴展：
• 支援更多括號類型（如尖括號 < >）
• 支援括號的嵌套深度統計
• 實現括號的自動修復建議
• 加入圖形化界面顯示匹配過程 