=== 二元搜尋樹測試案例 ===

測試案例 1: 基本插入與遍歷
輸入序列: 50, 30, 70, 20, 40, 60, 80
預期樹結構:
        50
       /  \
      30   70
     / \   / \
    20 40 60 80

預期輸出:
- 中序遍歷: 20 30 40 50 60 70 80
- 前序遍歷: 50 30 20 40 70 60 80
- 後序遍歷: 20 40 30 60 80 70 50
- 層序遍歷: 50 30 70 20 40 60 80
- 最小值: 20
- 最大值: 80
- 樹高度: 2

測試案例 2: 刪除葉節點
初始樹: [50, 30, 70, 20, 40, 60, 80]
刪除: 20
預期樹結構:
        50
       /  \
      30   70
       \   / \
       40 60 80

預期輸出:
- 中序遍歷: 30 40 50 60 70 80
- 樹高度: 2

測試案例 3: 刪除有一個子節點的節點
初始樹: [50, 30, 70, 20, 40, 60, 80]
刪除: 30（有兩個子節點，應該用40替換）
預期樹結構:
        50
       /  \
      40   70
     /    / \
    20   60 80

預期輸出:
- 中序遍歷: 20 40 50 60 70 80
- 前序遍歷: 50 40 20 70 60 80

測試案例 4: 刪除根節點
初始樹: [50, 30, 70, 20, 40, 60, 80]
刪除: 50（根節點，應該用60替換）
預期樹結構:
        60
       /  \
      30   70
     / \    \
    20 40   80

預期輸出:
- 中序遍歷: 20 30 40 60 70 80
- 前序遍歷: 60 30 20 40 70 80
- 根節點: 60

測試案例 5: 不平衡樹（右偏）
輸入序列: 10, 20, 30, 40, 50
預期樹結構:
    10
     \
     20
      \
      30
       \
       40
        \
        50

預期輸出:
- 中序遍歷: 10 20 30 40 50
- 前序遍歷: 10 20 30 40 50
- 後序遍歷: 50 40 30 20 10
- 樹高度: 4
- 最小值: 10
- 最大值: 50

測試案例 6: 不平衡樹（左偏）
輸入序列: 50, 40, 30, 20, 10
預期樹結構:
        50
       /
      40
     /
    30
   /
  20
 /
10

預期輸出:
- 中序遍歷: 10 20 30 40 50
- 前序遍歷: 50 40 30 20 10
- 後序遍歷: 10 20 30 40 50
- 樹高度: 4

測試案例 7: 單節點樹
輸入序列: 42
預期樹結構:
    42

預期輸出:
- 中序遍歷: 42
- 前序遍歷: 42
- 後序遍歷: 42
- 層序遍歷: 42
- 最小值: 42
- 最大值: 42
- 樹高度: 0

測試案例 8: 空樹操作
輸入: 無插入操作
預期輸出:
- 所有遍歷: "樹為空"
- 最小值: "樹為空"
- 最大值: "樹為空"
- 樹高度: -1
- BST有效性: true

測試案例 9: 重複值插入
輸入序列: 50, 30, 50, 70, 30
預期行為:
- 第一次插入50: 成功
- 插入30: 成功
- 第二次插入50: 顯示"值已存在"警告
- 插入70: 成功
- 第二次插入30: 顯示"值已存在"警告

最終樹結構:
    50
   /  \
  30   70

測試案例 10: 大規模測試
輸入序列: 50, 25, 75, 12, 37, 62, 87, 6, 18, 31, 43, 56, 68, 81, 93
預期樹結構:
                50
               /  \
             25    75
            / \    / \
          12  37  62  87
         / \ / \ / \ / \
        6 18 31 43 56 68 81 93

預期輸出:
- 中序遍歷: 6 12 18 25 31 37 43 50 56 62 68 75 81 87 93
- 樹高度: 3
- 節點總數: 15

測試案例 11: BST有效性檢查
有效BST例子:
    50
   /  \
  30   70
 / \   / \
20 40 60 80
預期: 有效

無效BST例子（如果手動構造）:
    50
   /  \
  70   30  (左右子樹顛倒)
預期: 無效

測試案例 12: 複合操作測試
操作序列:
1. 插入: 50, 30, 70, 20, 40
2. 刪除: 30
3. 插入: 25, 35
4. 刪除: 50
5. 計算高度
6. 檢查有效性

預期最終樹結構:
    60
   /  \
  25   70
 / \
20  35
   \
   40

預期輸出:
- 中序遍歷: 20 25 35 40 60 70
- 樹高度: 3
- BST有效性: true 