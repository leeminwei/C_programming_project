=== 互動式測試腳本 ===

以下是建議的互動測試流程，學生可以按照此流程測試程式功能：

測試流程 1: 基本功能測試
----------------------------
步驟 1: 啟動程式
./bst_system

步驟 2: 測試插入功能
選擇: 1 (插入節點)
輸入: 50
輸入: 30
輸入: 70
輸入: 20
輸入: 40
輸入: 60
輸入: 80

步驟 3: 測試遍歷功能
選擇: 5 (中序遍歷)
預期輸出: 20 30 40 50 60 70 80

選擇: 6 (前序遍歷)
預期輸出: 50 30 20 40 70 60 80

選擇: 7 (後序遍歷)
預期輸出: 20 40 30 60 80 70 50

選擇: 8 (層序遍歷)
預期輸出: 50 30 70 20 40 60 80

步驟 4: 測試搜尋功能
選擇: 3 (搜尋最小值)
預期輸出: 最小值: 20

選擇: 4 (搜尋最大值)
預期輸出: 最大值: 80

步驟 5: 測試樹資訊
選擇: 9 (計算樹的高度)
預期輸出: 樹的高度: 2

選擇: 10 (檢查BST有效性)
預期輸出: 此樹是有效的二元搜尋樹

選擇: 11 (顯示樹的結構)
預期顯示視覺化樹結構

測試流程 2: 刪除功能測試
----------------------------
步驟 1: 繼續使用上面建立的樹

步驟 2: 刪除葉節點
選擇: 2 (刪除節點)
輸入: 20
預期: 刪除成功

選擇: 5 (中序遍歷)
預期輸出: 30 40 50 60 70 80

步驟 3: 刪除有一個子節點的節點
選擇: 1 (插入節點)
輸入: 25 (為了創建有一個子節點的節點)

選擇: 2 (刪除節點)
輸入: 30 (現在30有右子節點40和新插入的25作為左子節點)

選擇: 5 (中序遍歷)
檢查結果是否正確

步驟 4: 刪除有兩個子節點的節點
選擇: 2 (刪除節點)
輸入: 50 (根節點，有兩個子節點)

選擇: 5 (中序遍歷)
檢查結果是否正確

測試流程 3: 邊界條件測試
----------------------------
步驟 1: 清空樹
選擇: 12 (清空樹)

步驟 2: 測試空樹操作
選擇: 3 (搜尋最小值)
預期輸出: 樹為空

選擇: 4 (搜尋最大值)
預期輸出: 樹為空

選擇: 5 (中序遍歷)
預期輸出: 樹為空

選擇: 9 (計算樹的高度)
預期輸出: 樹的高度: -1

步驟 3: 測試單節點樹
選擇: 1 (插入節點)
輸入: 42

選擇: 9 (計算樹的高度)
預期輸出: 樹的高度: 0

選擇: 3 (搜尋最小值)
預期輸出: 最小值: 42

選擇: 4 (搜尋最大值)
預期輸出: 最大值: 42

測試流程 4: 錯誤處理測試
----------------------------
步驟 1: 測試重複插入
選擇: 1 (插入節點)
輸入: 42 (已存在)
預期輸出: 值已存在，無法插入

步驟 2: 測試刪除不存在的節點
選擇: 2 (刪除節點)
輸入: 999
預期輸出: 節點不存在，無法刪除

步驟 3: 測試無效輸入
選擇: 999 (超出範圍的選項)
預期輸出: 無效選項，請重新選擇

在插入節點時輸入非數字
預期: 輸入錯誤提示

測試流程 5: 壓力測試
----------------------------
步驟 1: 插入大量節點
插入序列: 50, 25, 75, 12, 37, 62, 87, 6, 18, 31, 43, 56, 68, 81, 93, 3, 9, 15, 21, 28, 34, 40, 46, 53, 59, 65, 71, 78, 84, 90, 96

步驟 2: 測試各種操作的效能
- 檢查遍歷是否正確
- 檢查樹高度
- 檢查BST有效性

步驟 3: 大量刪除操作
刪除一半的節點，檢查樹結構是否仍然正確

測試流程 6: 記憶體管理測試
----------------------------
步驟 1: 執行完整的操作序列
- 插入多個節點
- 進行各種操作
- 刪除一些節點

步驟 2: 清空樹
選擇: 12 (清空樹)

步驟 3: 結束程式
選擇: 0 (結束程式)

步驟 4: 使用記憶體檢查工具
(在Linux/Mac上)
valgrind --leak-check=full ./bst_system

預期: 無記憶體洩漏

完整測試檢查清單：
□ 基本插入操作正確
□ 所有遍歷方式輸出正確
□ 最小值/最大值搜尋正確
□ 樹高度計算正確
□ BST有效性檢查正確
□ 葉節點刪除正確
□ 單子節點刪除正確
□ 雙子節點刪除正確
□ 根節點刪除正確
□ 空樹操作處理正確
□ 重複值插入處理正確
□ 刪除不存在節點處理正確
□ 無效輸入處理正確
□ 樹結構顯示正確
□ 記憶體正確釋放
□ 使用者介面友好
□ 程式可以正常結束 